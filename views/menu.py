import customtkinter as ctk
from tkinter import messagebox
import sys

# Configuraci√≥n de apariencia
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class MenuApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üèõÔ∏è Sistema de Gesti√≥n LOPNNA - Consejo de Protecci√≥n Carrizal")
        
        # Configurar para pantalla grande
        self.attributes('-fullscreen', False)
        self.geometry("1400x900")
        self.minsize(1200, 800)
        
        # Centrar ventana
        self.center_window()
        
        # Configurar layout principal
        self.setup_main_layout()

    def setup_main_layout(self):
        """Configurar el layout principal del men√∫"""
        # Frame principal
        main_container = ctk.CTkFrame(self, fg_color="transparent")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)

        # Header con informaci√≥n
        header_frame = ctk.CTkFrame(main_container, height=100)
        header_frame.pack(fill="x", pady=(0, 20))
        header_frame.pack_propagate(False)

        # Contenido del header
        title_label = ctk.CTkLabel(
            header_frame,
            text="üèõÔ∏è SISTEMA DE GESTI√ìN LOPNNA",
            font=("Arial", 28, "bold"),
            text_color="#2e86ab"
        )
        title_label.pack(pady=10)

        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="Consejo de Protecci√≥n de Ni√±os, Ni√±as y Adolescentes - Municipio Carrizal",
            font=("Arial", 16),
            text_color="#7f8c8d"
        )
        subtitle_label.pack()

        # Frame para los m√≥dulos
        modules_frame = ctk.CTkFrame(main_container)
        modules_frame.pack(fill="both", expand=True)

        # T√≠tulo de m√≥dulos
        modules_title = ctk.CTkLabel(
            modules_frame,
            text="üìã M√ìDULOS DEL SISTEMA",
            font=("Arial", 20, "bold"),
            text_color="#2e86ab"
        )
        modules_title.pack(pady=20)

        # Grid para los botones de m√≥dulos
        buttons_grid = ctk.CTkFrame(modules_frame, fg_color="transparent")
        buttons_grid.pack(fill="both", expand=True, padx=50, pady=20)

        # Configurar grid layout
        buttons_grid.columnconfigure(0, weight=1)
        buttons_grid.columnconfigure(1, weight=1)
        buttons_grid.columnconfigure(2, weight=1)
        buttons_grid.rowconfigure(0, weight=1)
        buttons_grid.rowconfigure(1, weight=1)
        buttons_grid.rowconfigure(2, weight=1)

        # Definir m√≥dulos con emojis y colores
        modules = [
            {
                "emoji": "üë¶", "text": "Gesti√≥n de NNA", 
                "command": self.gestion_nna, "color": "#3498db",
                "description": "Administrar informaci√≥n de\nNi√±os, Ni√±as y Adolescentes"
            },
            {
                "emoji": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "text": "Gesti√≥n de Familiares", 
                "command": self.gestion_familiares, "color": "#9b59b6",
                "description": "Gestionar datos de\nfamiliares y tutores"
            },
            {
                "emoji": "üè´", "text": "Unidades Educativas", 
                "command": self.gestion_ue, "color": "#e74c3c",
                "description": "Administrar Unidades\nEducativas"
            },
            {
                "emoji": "üìö", "text": "Gesti√≥n de Matr√≠culas", 
                "command": self.gestion_matriculas, "color": "#f39c12",
                "description": "Controlar matr√≠culas\neducativas"
            },
            {
                "emoji": "üì¶", "text": "Gesti√≥n de Art√≠culos", 
                "command": self.gestion_articulos, "color": "#1abc9c",
                "description": "Administrar art√≠culos\ndel sistema"
            },
            {
                "emoji": "üë•", "text": "Gesti√≥n de Personal", 
                "command": self.gestion_personal, "color": "#34495e",
                "description": "Gestionar usuarios\ndel sistema"
            },
        ]

        # Crear botones en grid
        for i, module in enumerate(modules):
            row = i // 3
            col = i % 3
            
            self.create_module_button(
                buttons_grid, module, row, col
            )

        # Frame para botones de control
        control_frame = ctk.CTkFrame(main_container, height=80)
        control_frame.pack(fill="x", pady=(20, 0))
        control_frame.pack_propagate(False)

        # Botones de control
        control_buttons_frame = ctk.CTkFrame(control_frame, fg_color="transparent")
        control_buttons_frame.pack(expand=True)

        # Bot√≥n de ayuda
        help_button = ctk.CTkButton(
            control_buttons_frame,
            text="‚ùì Ayuda del Sistema",
            command=self.mostrar_ayuda,
            height=40,
            font=("Arial", 14),
            fg_color="#f39c12",
            hover_color="#e67e22"
        )
        help_button.pack(side="left", padx=10)

        # Bot√≥n de cerrar sesi√≥n
        logout_button = ctk.CTkButton(
            control_buttons_frame,
            text="üö™ Cerrar Sesi√≥n",
            command=self.cerrar_sesion,
            height=40,
            font=("Arial", 14, "bold"),
            fg_color="#e74c3c",
            hover_color="#c0392b"
        )
        logout_button.pack(side="right", padx=10)

    def create_module_button(self, parent, module, row, col):
        """Crear un bot√≥n de m√≥dulo con dise√±o mejorado"""
        button_frame = ctk.CTkFrame(parent, fg_color="transparent")
        button_frame.grid(row=row, column=col, padx=15, pady=15, sticky="nsew")
        
        button = ctk.CTkButton(
            button_frame,
            text=f"{module['emoji']}\n{module['text']}\n\n{module['description']}",
            command=module['command'],
            height=150,
            font=("Arial", 16, "bold"),
            fg_color=module['color'],
            hover_color=self.darken_color(module['color']),
            text_color="white",
            corner_radius=15
        )
        button.pack(fill="both", expand=True)

    def darken_color(self, color):
        """Oscurecer un color para el efecto hover"""
        # Implementaci√≥n simple para oscurecer colores hex
        if color.startswith('#'):
            r = int(color[1:3], 16)
            g = int(color[3:5], 16)
            b = int(color[5:7], 16)
            r = max(0, r - 30)
            g = max(0, g - 30)
            b = max(0, b - 30)
            return f'#{r:02x}{g:02x}{b:02x}'
        return color

    def center_window(self):
        """Centrar la ventana en la pantalla"""
        self.update_idletasks()
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x = (screen_width - 1400) // 2
        y = (screen_height - 900) // 2
        self.geometry(f'1400x900+{x}+{y}')

    def gestion_nna(self):
        """Abrir gesti√≥n de NNA"""
        try:
            from funcion_vista_nna import main
            main()
        except ImportError as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir el m√≥dulo NNA: {str(e)}")
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error inesperado: {str(e)}")
    
    def gestion_familiares(self):
        """Abrir gesti√≥n de Familiares"""
        try:
            from funcion_vista_fami import main
            main()
        except ImportError as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir el m√≥dulo Familiares: {str(e)}")
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error inesperado: {str(e)}")
    
    def gestion_ue(self):
        """Abrir gesti√≥n de Unidades Educativas"""
        try:
            from funcion_vista_ue import main
            main()
        except ImportError as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir el m√≥dulo UE: {str(e)}")
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error inesperado: {str(e)}")
    
    def gestion_matriculas(self):
        """Abrir gesti√≥n de Matr√≠culas"""
        try:
            from funcion_vista_matricula import main
            main()
        except ImportError as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir el m√≥dulo Matr√≠culas: {str(e)}")
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error inesperado: {str(e)}")
    
    def gestion_articulos(self):
        """Abrir gesti√≥n de Art√≠culos"""
        try:
            from funcion_vista_art import main
            main()
        except ImportError as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir el m√≥dulo Art√≠culos: {str(e)}")
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error inesperado: {str(e)}")
    
    def gestion_personal(self):
        """Abrir gesti√≥n de Personal"""
        try:
            from funcion_vista_personal import PersonalVista
            # PersonalVista crea su propia ventana Tk()
            PersonalVista()
        except ImportError as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir el m√≥dulo Personal: {str(e)}")
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error inesperado: {str(e)}")
    
    def mostrar_ayuda(self):
        """Mostrar informaci√≥n de ayuda del sistema"""
        ayuda_texto = """
üèõÔ∏è SISTEMA DE GESTI√ìN LOPNNA
Consejo de Protecci√≥n de Ni√±os, Ni√±as y Adolescentes
üìç Municipio Carrizal

üìã M√ìDULOS DISPONIBLES:

üë¶ Gesti√≥n de NNA: Administrar informaci√≥n de Ni√±os, Ni√±as y Adolescentes
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gesti√≥n de Familiares: Gestionar datos de familiares y tutores
üè´ Gesti√≥n de UE: Administrar Unidades Educativas
üìö Gesti√≥n de Matr√≠culas: Controlar matr√≠culas educativas
üì¶ Gesti√≥n de Art√≠culos: Administrar art√≠culos del sistema
üë• Gesti√≥n de Personal: Gestionar usuarios del sistema

üéØ INSTRUCCIONES:
‚Ä¢ Para usar cada m√≥dulo, haga clic en el bot√≥n correspondiente
‚Ä¢ Cada m√≥dulo se abre en una ventana independiente
‚Ä¢ Puede tener m√∫ltiples m√≥dulos abiertos simult√°neamente

üìû CONTACTOS:
‚Ä¢ üìß Soporte t√©cnico: soporte@cpnnacarrizal.gob.ve
‚Ä¢ üìû Tel√©fono: (0212) 123-4567
‚Ä¢ üè¢ Direcci√≥n: Av. Principal, Carrizal, Edo. Miranda

üõ°Ô∏è Protegiendo los derechos de la ni√±ez y adolescencia venezolana
        """
        messagebox.showinfo("‚ùì Ayuda del Sistema", ayuda_texto)
    
    def cerrar_sesion(self):
        """Cerrar sesi√≥n y volver al login"""
        if messagebox.askyesno("üö™ Cerrar Sesi√≥n", "¬øEst√° seguro de que desea cerrar sesi√≥n?"):
            self.destroy()
            # Volver al login
            try:
                from views.funcion_login import LoginApp
                login_app = LoginApp()
                login_app.run()
            except ImportError:
                # Si no se puede volver al login, cerrar completamente
                sys.exit(0)

if __name__ == "__main__":
    # Si se ejecuta menu.py directamente, iniciar el login primero
    try:
        from funcion_login import LoginApp
        login_app = LoginApp()
        login_app.run()
    except ImportError:
        # Si no existe el login, iniciar el men√∫ directamente
        app = MenuApp()
        app.mainloop()